 [
    {
    "name": "NSAutoReleasePool",
    "text": "NSAutoreleasePool可以同时有多个，它的组织是个栈，总是存在一个栈顶pool，也就是当前pool，每创建一个pool，就往栈里压一个，改变当前pool为新建的pool，然后，每次给pool发送drain消息，就弹出栈顶的pool，改当前pool为栈里的下一个 pool，当栈顶的pool被销毁时，就会向当前pool里面的所有对象执行一次release操作。\n\n\n对于每一个Runloop， 系统会隐式创建一个Autorelease pool，这样所有的release pool会构成一个象CallStack一样的一个栈式结构，在每一个Runloop结束时，当前栈顶的Autorelease pool会被销毁，这样这个pool里的每个Object会被release。 \n\n\n一个进程（程序）至少包含一个线程即主线程，一般来讲，一个线程一次只能执行一个任务，执行完成后线程就会退出。如果我们需要一个机制，让线程能随时处理事件但并不退出，这个时候这个线程就拥有了“等待->接收消息->处理”然后循环的能力，这种模型通常被称作 Event Loop \n\n\n一个线程的创建，即是runloop的创建，同时隐式创建一个Autorelease pool，储存着对象的引用，计数+1。 一个线程被销毁，对应的runloop被销毁，对应的pool也被销毁（执行drain），所管理的所有对象执行release操作，引用销毁，计数-1。一个UI事件，Timer call，delegate call等，其实也是系统隐性的创建出一个线程来等待->接收->执行消息。",
    },
    
    {
        "name": "NSByteCountFormatter",
        "text": "用于格式化大小的字符串\n NSString * str =  [NSByteCountFormatter stringFromByteCount:10929292 countStyle:NSByteCountFormatterCountStyleFile];\nNSLog(@\"str: %@\", str);\n str: 10.9 MB",
    },
    
    
    {
        "name": "NSHostByteOrder  字节序",
        "text": "UInt16  Byte = 0x1234;\nHTONS(Byte);\nNSLog(@\"Byte == %x\",Byte); \n 3412",
    },
    
    {
        "name": "NSCache",
        "text": "NSCache是苹果官方提供的缓存类，它的用法与NSMutableDictionary的用法很相似\nNSCache在系统发出低内存通知时，会自动删减缓存\nNSCache可以设置数量限制，通过countLimit与 totalCostLimit来限制cache的数量或者限制cost\nNSCache是线程安全的，在多线程操作中，不需要对Cache加锁。NSCache的Key只是对对象的strong引用，对象不需要实现NSCopying协议，NSCache也不会像NSDictionary一样复制对象",
    },
    
    {
        "name": "NSCharacterSet 字符集",
        "text": "NSString *str = @\"今天我们来学习NSCharacterSet我们快乐\";\nNSString *str1 = @\"我s今\";NSMutableString *resultStr = [[NSMutableString alloc]init];\nfor (int i = 0; i < str.length; i++) \n{NSString *indexStr = [str substringWithRange:NSMakeRange(i, 1)];\nif (![str1 containsString:indexStr]) {\n[resultStr\nappendString:indexStr];}}\nNSLog(@\"%@\",resultStr);\n天们来学习NSCharacterSet们快乐\n  [NSCharacterSet controlCharacterSet]; //控制符的字符集\n[NSCharacterSet whitespaceCharacterSet]; //空格的字符集\n[NSCharacterSet whitespaceAndNewlineCharacterSet]; //空格和换行符的字符集\n[NSCharacterSet decimalDigitCharacterSet]; //十进制数字的字符集\n[NSCharacterSet letterCharacterSet]; //字母的字符集\n[NSCharacterSet lowercaseLetterCharacterSet]; //小写字母的字符集\n[NSCharacterSet uppercaseLetterCharacterSet]; //大写字母的字符集\n[NSCharacterSet nonBaseCharacterSet]; //非基础的字符集\n[NSCharacterSet alphanumericCharacterSet]; //字母和数字的字符集\n[NSCharacterSet decomposableCharacterSet]; //可分解\n[NSCharacterSet illegalCharacterSet]; //非法的字符集\n[NSCharacterSet punctuationCharacterSet]; //标点的字符集\n[NSCharacterSet capitalizedLetterCharacterSet]; //首字母大写的字符集\n[NSCharacterSet symbolCharacterSet]; //符号的字符集\n[NSCharacterSet newlineCharacterSet]; //换行符的字符集",
    },
    
    
    {
        "name": "NSCoder 与 NSdecode ",
        "text": "数据规定时候使用",
    },
    
    {
        "name": "NSComparisonPredicate  ",
        "text": "使用搜索功能， 可以在官网搜搜对应demo，集合 联合 UISearchController 使用",
    },
    
    {
        "name":"NSCompoundPredicate",
        "text": "NSMutableArray *array=[NSMutableArray array];//\n[array addObject:[[HBXLearnModel alloc] initWith:@\"lww\" age:20]];//\n[array addObject:[[HBXLearnModel alloc] initWith:@\"wy\" age:20]];//\n[array addObject:[[HBXLearnModel alloc] initWith:@\"LWW\" age:21]];//\n[array addObject:[[HBXLearnModel alloc] initWith:@\"sunshinelww\" age:22]];//\n\n\n//    NSPredicate *basicPredicate=[NSPredicate predicateWithFormat:@\"name = 'lww'\"];//\n\n\n//    //基础过滤//\n//    [array filterUsingPredicate: basicPredicate]; //通过条件表达式筛选数组元素//\nNSMutableArray *predicateArray=[NSMutableArray array];//\nNSPredicate *basicPredicate1=[NSPredicate predicateWithFormat:@\"name = 'lww'\"];//\nNSPredicate *basicPredicate2=[NSPredicate predicateWithFormat:@\"age = 20\"];[predicateArray addObject: basicPredicate1];//\n[predicateArray addObject: basicPredicate2];//\n\n//    NSCompoundPredicate *orMatchPredicate=[NSCompoundPredicate orPredicateWithSubpredicates:predicateArray]; ///对//\n数组中的谓词表达式取或//    [array filterUsingPredicate:orMatchPredicate];//\n\n//    NSLog(@\"array after: %@\", array);//\n//    NSCompoundPredicate *andMatchPredicate=[NSCompoundPredicate andPredicateWithSubpredicates:predicateArray];///对数组中的谓词表达式取与//\n//    [array filterUsingPredicate:andMatchPredicate];//\n//    NSLog(@\"array after: %@\", array);//\n\n//    NSCompoundPredicate *noMatchPredicate = [NSCompoundPredicate notPredicateWithSubpredicate://\n basicPredicate1]; ///对basicPredicate1取反//\n//    [array filterUsingPredicate:noMatchPredicate];//\n//    NSLog(@\"array after: %@\", array);//\n",
    },
    {
        "name": "NSDate  ",
        "text": "// 直接初始化的时间, 也是当前时间\n//NSDate *date = [[NSDate alloc]init];\nNSTimeZone *zone = [NSTimeZone systemTimeZone];\nNSTimeInterval interval = [zone secondsFromGMTForDate:date];\nNSDate *current = [date dateByAddingTimeInterval:interval];",
    },
    {
        "name": "NSDateComponentsFormatter  ",
        "text": "日历格式组件",
    },
    
    {
        "name": "NSDateFormatter  ",
        "text": "日期格式",
    },

    {
        "name": "NSDateInterval  ",
        "text": "日期区间 开始给结束区间",
    },
    {
        "name": "NSDecimal NSDecimalNumber ",
        "text": "科学计数法 加减乘服 乘方",
    },
    
    {
        "name": "NSFormatter   ",
        "text": "// 新类 主要都是在HealthKit当中使用\n//NSEnergyFormatter使用焦作为能量的原始单位，当处理健康信息时，则使用卡.\n[NSEnergyFormatter class];\n虽然质量是物质存在的基本单位, 在HealthKit中，它主要指的是身体重量.\n[NSMassFormatter class];\nNSFormatter的最后一个新子类是NSLengthFormatter. 我们可以把它想象为MKDistanceFormatter的加强版。\n[NSLengthFormatter class];",
    },
    
    {
        "name": "NSEnumerator   ",
        "text": "计数器 NSArray NSDictionary NSSet 都可以获取到\n  NSArray *newArray = @[@\"1\", @\"2\", @\"3\"];\nNSEnumerator *enumtrator = [newArray objectEnumerator];\nNSString *obj = nil;\nwhile (obj  =[enumtrator nextObject]) {\nNSLog(@\"obj: %@\", obj);\n} ",
    },
    
    {
        "name": "NSException   ",
        "text": "控制程序的异常情况, 可以通过try catch获取异常， 可以用runtime + ",
    },
    
    {
        "name": "NSExpression   ",
        "text": "表达式运算， 属性，函数 ",
    },
    {
        "name": "NSFileCoordinator   ",
        "text": "文件系统是全局公用的, NSFileCoordinator 文件协调器 \nNSFilePresenter文件提出\nNSFileHandle文件处理类,主要是对文件读取和写入\n文件通用管理,对文件的操作管理，信息获取",
    },
  
  {
      "name": "NSHashTable   ",
      "text": "NSHashTable是根据一个option参数来进行初始化的，\nNSHashTableStrongMemory: 等同于NSPointerFunctionsStrongMemory. 对成员变量进行强引用。这是一个默认值。如果采用这个默认值,NSHashTable和NSSet就没什么区别了。\nNSHashTableWeakMemory: 等同于NSPointerFunctionsWeakMemory.对成员变量进行弱引用. 使用 NSPointerFunctionsWeakMemory, object 引用在最后释放的时候会被指向 NULL。\nNSHashTableZeroingWeakMemory: 已被抛弃.使用NSHashTableWeakMemory 代替。\nNSHashTableCopyIn: 在对象被加入集合之前进行复制 (NSPointerFunction -acquireFunction). 等同于NSPointerFunctionsCopyIn\nNSHashTableObjectPointerPersonality: 用指针来等同代替实际的值，当打印这个指针的时候相当于调用description方法。和NSPointerFunctionsObjectPointerPersonality等同。",
  },
  
  {
      "name": "NSMapTable   ",
      "text": "NSMapTable是对更广泛意义的NSDictionary。和NSDictionary / NSMutableDictionary相比具有如下特性：NSDictionary / NSMutableDictionary会复制keys并且通过强引用values来实现存储。NSMapTable是可变的。NSMapTable可以通过弱引用来持有keys和values，所以当key或者value被deallocated的时候，所存储的实体也会被移除。NSMapTable可以在添加value的时候对value进行复制和NSHashTable类似，NSMapTable可以随意的存储指针，并且利用指针的唯一性来进行对比和重复检查。",
  },
  {
      "name": "Cookie   ",
      "text": "Cookie是由服务器端生成，发送给User-Agent（一般是浏览器或者客户端）,浏览器会将Cookie的key/value保存到某个目录下的文本文件内，下次请求同一网站地址时就发送该Cookie给服务器。Cookie必然会通过HTTP的Respone传过来，并且Cookie在Respone中的HTTP header中。\n\n       为什么需要Cookie？?HTTP是一种无状态的协议，客户端与服务器建立连接并传输数据，数据传输完成后，连接就会关闭。再次交互数据需要建立新的连接，因此，服务器无法从连接上跟踪会话，也无法知道用户上一次做了什么。这严重阻碍了基于Web应用程序的交互，也影响用户的交互体验。如：在网络有时候需要用户登录才进一步操作，用户输入用户名密码登录后，浏览了几个页面，由于HTTP的无状态性，服务器并不知道用户有没有登录。\n\nCookie是解决HTTP无状态性的有效手段，服务器可以设置或读取Cookie中所包含的信息\n\n Cookie的类型 \n\nCookie总时由用户客户端进行保存的（一般是浏览器），按其存储位置可分为：内存式Cookie（cookie是指在不设定它的生命周期expires时的状态）和硬盘式Cookie。内存式Cookie存储在内存中，浏览器关闭后就会消失，由于其存储时间较短，因此也被称为非持久Cookie或会话Cookie。硬盘式Cookie保存在硬盘中，其不会随浏览器的关闭而消失，除非用户手工清理或到了过期时间。由于硬盘式Cookie存储时间是长期的，因此也被称为持久Cookie \n\n如果不设置过期时间，则表示这个cookie生命周期为浏览器会话期间，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览会话期的cookie被称为会话cookie。会话cookie一般不保存在硬盘上而是保存在内存里。　　如果设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。　　存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存的cookie，不同的浏览器有不同的处理方式。\n\ncookie的内容主要包括：名字，值，过期时间，路径和域。\n\nNSHTTPCookieStorage  NSHTTPCookieStorage提供了管理所有NSHTTPCookie对象的接口,在OS X里cookie是在所有程序中共享的，而在iOS中,cookie只当当前应用中有效。NSHTTPCookieStorage类采用单例的设计模式，其中管理着所有HTTP请求的Cookie信息,更改cookie的接受政策将会影响当前所有正在使用cookie的app。  设置cookie(手动创建的cookie不会储存到本地)  \n\nNSArray * cookArray = [[NSHTTPCookieStorage sharedHTTPCookieStorage] cookiesForURL:[NSURL URLWithString:@\"指定URL\"]];for (NSHTTPCookie*cookie in cookArray) {if ([cookie.name isEqualToString:@\"cookiename\"]) {[[NSHTTPCookieStorage sharedHTTPCookieStorage]deleteCookie:cookie];}}  \n\n[[NSURLCache sharedURLCache] removeCachedResponseForRequest:[NSURLRequest requestWithURL:url]];  ",
  },
  {
      "name": "NSHTTPCookieStorage   ",
      "text": "cookie存储机制",
  },
  
  {
      "name": "NSInvocation   ",
      "text": "可以获取方法对象，类型，可以单独执行方法",
  },
  {
      "name": "NSKeyedArchiver  NSKeyedUnarchiver ",
      "text": "用于对象归档 详情查看nscoding协议  HBXLearnModel  查看方法showKeyArchiveFunction",
  },
  
  {
      "name": "NSKeyValueObserving ",
      "text": "KVC 设置对象的值   KVO 给对象添加监听事件",
  },
  {
      "name": "NSLinguisticTagger ",
      "text": "自然语言筛选",
  },
  
  {
      "name": "锁 ",
      "text": "实现方式NSLock   synchronized dispatch_semaphore_t （pthread_mutex_init   pthread_mutex_lock  pthread_mutex_unlock）  OSSpinLock（自旋锁，死循环） \n\nNSLock为互斥锁对象锁 实现原理为在线上上封装属性pthread_mutex,值为PTHREAD_MUTEX_ERRORCHECK  \n\nsynchronized对象锁，基本对象的属性封装完成 \n\n dispatch_semaphore_t性能较优越 为线程枷锁，保持线程同步 \n\nOSSpinLock的性能值最好的",
  },
  {
      "name": "Measurement ",
      "text": "iOS 10新特性  单位转换  秒可以转换为分钟，小时等",
  },
  {
      "name": "NSNetService ",
      "text": "发布服务内容， 可以与socket操作",
  },
  {
      "name": "NSNotificationQueue ",
      "text": "异步队列通知，可以是非及时的",
  },
  {
      "name": "NSOperation ",
      "text": "NSOperation、NSOperationQueue？\n1可添加完成的代码块，在操作完成后执行。\n2添加操作之间的依赖关系，方便的控制执行顺序。/n3设定操作执行的优先级。\n4可以很方便的取消一个操作的执行。\n5使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。\n实现方式为NSOperation 子类 NSInvocationOperation、NSBlockOperation，或者自定义子类来封装操作\n操作队列这里的队列指操作队列，即用来存放操作的队列。不同于 GCD 中的调度队列 FIFO（先进先出）的原则。NSOperationQueue 对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。操作队列通过设置 最大并发操作数（maxConcurrentOperationCount） 来控制并发、串行。NSOperationQueue 为我们提供了两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行",
  },
  {
      "name": "NSStringPathExtensions ",
      "text": "对string 路径的处理",
  },
  {
      "name": "NSPointerArray ",
      "text": "实现数据的弱引用",
  },
  
  {
      "name": "NSPointerArray ",
      "text": "实现数据的弱引用",
  },
  {
      "name": "NSProcessInfo ",
      "text": "获取进程信息",
  },
  {
      "name": "NSProgress ",
      "text": "进度信息，详情查看代码",
  },
  {
      "name": "NSPropertyListSerialization",
      "text": "将常规数据结构变成nsdata 或者反之",
  },
  {
      "name": "NSRegularExpression",
      "text": "正则表达式",
  },
  {
      "name": "NSScanner",
      "text": "字符串扫描",
  },
]

